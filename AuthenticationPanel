/* Hitaansh Jain, Aaron Rhim, Sandilya Parimi
   Period 1
   1/20/2024

   This class cosntructs a JFrame panel for the login and sign up. 
   This is where new users can create an account and returning users 
   can log in to find their saved events. An account is required to 
   access the application. User credentials are stored on a file on 
   the user's computer, and they can make multiple accounts.
*/

import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.*;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;
import javax.swing.*;

public class AuthenticationPanel extends JFrame {
   // static variable to hold the instance
   public static AuthenticationPanel instance;

   // saving mechs
   private Map<String, String> userCredentials;
   private String currentUsername;
   private Map<String, Map<Integer, ArrayList<String>>> godMap;

   // Constructor
   public AuthenticationPanel() {
      // load saved? (debugging)
      userCredentials = loadUserCredentials();
      godMap = loadGodMap();
      currentUsername = "";

      setTitle("Sign Up / Login Panel");
      setSize(300, 150);
      setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
      setLocationRelativeTo(null);

      JPanel panel = new JPanel();
      panel.setLayout(new GridLayout(3, 1));

      JButton signUpButton = new JButton("Sign Up");
      JButton loginButton = new JButton("Login");

      signUpButton.addActionListener(new ActionListener() {
         @Override
         public void actionPerformed(ActionEvent e) {
            showSignUpDialog();
         }
      });

      loginButton.addActionListener(new ActionListener() {
         @Override
         public void actionPerformed(ActionEvent e) {
            showLoginDialog();
         }
      });

      panel.add(signUpButton);
      panel.add(loginButton);

      add(panel);

      setVisible(true);
   }

   // getName accessor
   public String getName() {
      return currentUsername;
   }

   // Load username and password accessor
   public Map<String, String> loadUserCredentials() {
      Map<String, String> credentials = new HashMap<>();

      // InputStream
      try (ObjectInputStream ois =
               new ObjectInputStream(new FileInputStream("user_credentials.dat"))) {
         credentials = (Map<String, String>) ois.readObject();
      } catch (FileNotFoundException e) {
         // Handle file not found (first run)
      } catch (IOException | ClassNotFoundException e) {
         e.printStackTrace(); // Handle other exceptions
      }

      return credentials;
   }

   // load pre-existing information accessor
   public Map<String, Map<Integer, ArrayList<String>>> loadGodMap() {
      Map<String, Map<Integer, ArrayList<String>>> god = new HashMap<>();

      try (ObjectInputStream ois = new ObjectInputStream(new FileInputStream("god_map.dat"))) {
         god = (Map<String, Map<Integer, ArrayList<String>>>) ois.readObject();
      } catch (FileNotFoundException e) {
         // Handle file not found (first run)
      } catch (IOException | ClassNotFoundException e) {
         e.printStackTrace(); // Handle other exceptions
      }

      return god;
   }

   // saveUserCredentials mutator
   public void saveUserCredentials() {
      try (ObjectOutputStream oos =
               new ObjectOutputStream(new FileOutputStream("user_credentials.dat"))) {
         oos.writeObject(userCredentials);
      } catch (IOException e) {
         e.printStackTrace(); // Handle the exception
      }
   }

   // saveGodMap mutator
   public void saveGodMap() {
      try (ObjectOutputStream oos = new ObjectOutputStream(new FileOutputStream("god_map.dat"))) {
         oos.writeObject(godMap);
      } catch (IOException e) {
         e.printStackTrace(); // Handle the exception
      }
   }

   // add new profile
   private void authUpdate() {
      godMap.put(currentUsername, null);
   }

   // Display sign-up dialog
   private void showSignUpDialog() {
      JFrame signUpFrame = new JFrame("Sign Up");
      signUpFrame.setSize(300, 150);
      signUpFrame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
      signUpFrame.setLocationRelativeTo(this);

      JPanel signUpPanel = new JPanel();
      signUpPanel.setLayout(new GridLayout(3, 2));

      JTextField usernameField = new JTextField();
      JPasswordField passwordField = new JPasswordField();

      JButton signUpButton = new JButton("Sign Up");
      signUpButton.addActionListener(new ActionListener() {
         @Override
         public void actionPerformed(ActionEvent e) {
            String username = usernameField.getText();
            char[] passwordChars = passwordField.getPassword();
            String password = new String(passwordChars);

            // condition for pre-existing profile
            if (!userCredentials.containsKey(username)) {
               userCredentials.put(username, password);
               authUpdate();
               saveUserCredentials();
               saveGodMap();
               JOptionPane.showMessageDialog(
                   signUpFrame, "Sign Up Successful!", "Success", JOptionPane.INFORMATION_MESSAGE);

               signUpFrame.dispose();
            } else {
               JOptionPane.showMessageDialog(signUpFrame,
                   "Username already exists. Please choose a different username.", "Error",
                   JOptionPane.ERROR_MESSAGE);
            }
         }
      });
      signUpPanel.add(new JLabel("Username:"));
      signUpPanel.add(usernameField);
      signUpPanel.add(new JLabel("Password:"));
      signUpPanel.add(passwordField);
      signUpPanel.add(signUpButton);

      signUpFrame.add(signUpPanel);
      signUpFrame.setVisible(true);
   }

   // Display login dialog
   private void showLoginDialog() {
      JFrame loginFrame = new JFrame("Login");
      loginFrame.setSize(300, 150);
      loginFrame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
      loginFrame.setLocationRelativeTo(this);

      JPanel loginPanel = new JPanel();
      loginPanel.setLayout(new GridLayout(3, 2));

      JTextField usernameField = new JTextField();
      JPasswordField passwordField = new JPasswordField();

      JButton loginButton = new JButton("Login");
      loginButton.addActionListener(new ActionListener() {
         @Override
         public void actionPerformed(ActionEvent e) {
            String username = usernameField.getText();
            char[] passwordChars = passwordField.getPassword();
            String password = new String(passwordChars);

            if (userCredentials.containsKey(username)
                && userCredentials.get(username).equals(password)) {
               currentUsername = username;

               saveGodMap();
               instance.openMainApplication();
               loginFrame.dispose();
            } else {
               JOptionPane.showMessageDialog(loginFrame,
                   "Invalid username or password. Please try again.", "Error",
                   JOptionPane.ERROR_MESSAGE);
            }
         }
      });
      loginPanel.add(new JLabel("Username:"));
      loginPanel.add(usernameField);
      loginPanel.add(new JLabel("Password:"));
      loginPanel.add(passwordField);
      loginPanel.add(loginButton);

      loginFrame.add(loginPanel);
      loginFrame.setVisible(true);
   }

   // Opens the main application (CalendarApp) -> buffer
   private void openMainApplication() {
      SwingUtilities.invokeLater(new Runnable() {
         @Override
         public void run() {
            new CalendarApp();
         }
      });
   }

   // Auth instance -> buffer
   public static void main(String[] args) {
      SwingUtilities.invokeLater(new Runnable() {
         @Override
         public void run() {
            instance = new AuthenticationPanel();
         }
      });
   }
}
