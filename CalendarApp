import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;

public class CalendarApp extends JFrame {
    private JLabel monthLabel;
    private JPanel calendarPanel;
    private JPanel inputPanel;
    
    private Calendar currentMonth;

    public CalendarApp() {
        currentMonth = Calendar.getInstance();

        setTitle("Java Calendar");
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        setSize(400, 300);
        setLocationRelativeTo(null);

        createGUI();

        setVisible(true);
    }

    private void createGUI() {
        Container container = getContentPane();
        container.setLayout(new BorderLayout());

        // Month Label
        monthLabel = new JLabel();
        monthLabel.setHorizontalAlignment(SwingConstants.CENTER);
        updateMonthLabel();
        container.add(monthLabel, BorderLayout.NORTH);

        // Calendar Panel
        calendarPanel = new JPanel(new GridLayout(6, 7));
        updateCalendar();
        container.add(calendarPanel, BorderLayout.CENTER);
        
        // Input Panel
        inputPanel = new JPanel();

        // Buttons for navigation
        JButton prevButton = new JButton("<< Prev");
        JButton addButton = new JButton("Add Event");
        JButton nextButton = new JButton("Next >>");

        prevButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                currentMonth.add(Calendar.MONTH, -1);
                updateMonthLabel();
                updateCalendar();
            }
        });
        
        addButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                updateInput();
            }
        });

        nextButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                currentMonth.add(Calendar.MONTH, 1);
                updateMonthLabel();
                updateCalendar();
            }
        });

        JPanel buttonPanel = new JPanel();
        buttonPanel.add(prevButton);
        buttonPanel.add(addButton);
        buttonPanel.add(nextButton);
        container.add(buttonPanel, BorderLayout.SOUTH);
    }

    private void updateMonthLabel() {
        SimpleDateFormat sdf = new SimpleDateFormat("MMMM yyyy");
        monthLabel.setText(sdf.format(currentMonth.getTime()));
    }
    
    private void updateInput() {
        JTextField dayField = new JTextField();
        JTextField eventField = new JTextField();

        JPanel inputPanel = new JPanel(new GridLayout(2, 2));
        inputPanel.add(new JLabel("Day (1-31):"));
        inputPanel.add(dayField);
        inputPanel.add(new JLabel("Event:"));
        inputPanel.add(eventField);
        
        int result = JOptionPane.showConfirmDialog(null, inputPanel,
                "Add Event", JOptionPane.OK_CANCEL_OPTION);

        if (result == JOptionPane.OK_OPTION) {
            try {
                int day = Integer.parseInt(dayField.getText());
                String event = eventField.getText();

                if (day < 1 || day > 31) {
                    JOptionPane.showMessageDialog(null, "Invalid day. Please enter a day between 1 and 31.");
                    return;
                }
                
                JOptionPane.showMessageDialog(null, "Event added successfully!");
            } 
            
            catch (NumberFormatException ex) {
                JOptionPane.showMessageDialog(null, "Invalid input. Please enter a valid number for the day.");
            }
        }
    }

    private void updateCalendar() {
        calendarPanel.removeAll();

        // Days of the week
        String[] daysOfWeek = {"Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"};
        for (String day : daysOfWeek) {
            JLabel label = new JLabel(day, SwingConstants.CENTER);
            calendarPanel.add(label);
        }

        // Blank spaces for the first day of the month
        int firstDayOfMonth = currentMonth.get(Calendar.DAY_OF_WEEK) - 1;
        for (int i = 0; i < firstDayOfMonth; i++) {
            calendarPanel.add(new JLabel());
        }

        // Days of the month
        int maxDay = currentMonth.getActualMaximum(Calendar.DAY_OF_MONTH);
        for (int i = 1; i <= maxDay; i++) {
            JButton dayButton = new JButton(Integer.toString(i));
            dayButton.addActionListener(new DayButtonListener(i));
            calendarPanel.add(dayButton);
        }

        revalidate();
        repaint();
    }

    private class DayButtonListener implements ActionListener {
        private int day;

        public DayButtonListener(int day) {
            this.day = day;
        }

        @Override
        public void actionPerformed(ActionEvent e) {
            JOptionPane.showMessageDialog(CalendarApp.this, "You clicked on day " + day);
        }
    }

    public static void main(String[] args) {
        SwingUtilities.invokeLater(new Runnable() {
            @Override
            public void run() {
                new CalendarApp();
            }
        });
    }
}
