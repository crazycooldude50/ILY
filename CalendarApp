import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.Locale;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Iterator;
import java.util.*;
import java.util.List;

public class CalendarApp extends JFrame {
    private JLabel monthLabel;
    private JPanel calendarPanel;
    private JPanel inputPanel;
    private JPanel barGraphPanel;
    private JPanel showEventsPanel;
    private JPanel importantEventsPanel;
    
    // Specified Variables
    private String barGraphInput;
    private int specifiedDay;
    private int specifiedMonth;

    // amount of events in a day (Manual) (Bar Graph)
    private Map<String, Integer> currentMap = new LinkedHashMap<>();
    private Map<Integer, Integer> eventCountsPerManualDay = new LinkedHashMap<>();

    // Amount of events in a day (clicked) (show Events)
    private int countEvents = 0;
    private Map<Integer, Integer> eventCountsPerDay = new LinkedHashMap<>();
    
    // Important Events
    private int countImp = 0;
    private Map<String, Integer> importantEventsMap = new LinkedHashMap<>();

    private Calendar currentMonth;

    private String[] daysOfWeek = {"Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"};

    public CalendarApp() {
        currentMonth = Calendar.getInstance();

        setTitle("Java Calendar");
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        setSize(600, 300);
        setLocationRelativeTo(null);

        createGUI();

        setVisible(true);
    }

    private void createGUI() {
        Container container = getContentPane();
        container.setLayout(new BorderLayout());

        // Month Label
        monthLabel = new JLabel();
        monthLabel.setHorizontalAlignment(SwingConstants.CENTER);
        updateMonthLabel();
        container.add(monthLabel, BorderLayout.NORTH);

        // Calendar Panel
        calendarPanel = new JPanel(new GridLayout(6, 7));
        updateCalendar();
        container.add(calendarPanel, BorderLayout.CENTER);

        // Input Panel
        inputPanel = new JPanel();

        // Buttons for navigation
        JButton prevButton = new JButton("<< Prev");
        JButton addButton = new JButton("Add Event");
        JButton barGraphButton = new JButton("Bar Graph");
        JButton importantButton = new JButton("Important Button");
        JButton nextButton = new JButton("Next >>");
        
        // Initialize JTextArea for important events
        

        prevButton.addActionListener(
                new ActionListener() {
                    @Override
                    public void actionPerformed(ActionEvent e) {
                        currentMonth.add(Calendar.MONTH, -1);
                        updateMonthLabel();
                        updateCalendar();
                    }
                });
                
        importantButton.addActionListener(
                new ActionListener() {
                    @Override
                    public void actionPerformed(ActionEvent e) {
                        updateImportantEventsList();
                    }
                });

        addButton.addActionListener(
                new ActionListener() {
                    @Override
                    public void actionPerformed(ActionEvent e) {
                        updateInput();
                    }
                });

        barGraphButton.addActionListener(
                new ActionListener() {
                    @Override
                    public void actionPerformed(ActionEvent e) {
                        openBarGraph();
                    }
                });

        nextButton.addActionListener(
                new ActionListener() {
                    @Override
                    public void actionPerformed(ActionEvent e) {
                        currentMonth.add(Calendar.MONTH, 1);
                        updateMonthLabel();
                        updateCalendar();
                    }
                });

        JPanel buttonPanel = new JPanel();
        buttonPanel.add(prevButton);
        buttonPanel.add(addButton);
        buttonPanel.add(barGraphButton);
        buttonPanel.add(importantButton);
        buttonPanel.add(nextButton);
        container.add(buttonPanel, BorderLayout.SOUTH);
    }

    private void updateMonthLabel() {
        SimpleDateFormat sdf = new SimpleDateFormat("MMMM yyyy");
        monthLabel.setText(sdf.format(currentMonth.getTime()));
    }

    private void openBarGraph() {
        // Use the current month and year
        Calendar calendar = Calendar.getInstance();

        String dateString = JOptionPane.showInputDialog("Enter a day of the month:");
        try {
            int selectedDay = Integer.parseInt(dateString);

            if (selectedDay >= 1 && selectedDay <= calendar.getActualMaximum(Calendar.DAY_OF_MONTH)) {

                // Set the selected day in the current month and year
                calendar.set(Calendar.DAY_OF_MONTH, selectedDay);

                // Calculate the start day (Sunday) and end day (Saturday) of the week
                int dayOfWeekIndex = calendar.get(Calendar.DAY_OF_WEEK) - 1;
                int startDay = selectedDay - dayOfWeekIndex;

                // Store each date from Sunday to Saturday in an array
                String[] selectedWeekDates = new String[7];
                for (int i = 0; i < 7; i++) {
                    selectedWeekDates[i] = String.valueOf(startDay + i);
                    System.out.println(selectedWeekDates[i]);
                }
                Map<Integer, Integer> eventCountsPerManualDay2 = new LinkedHashMap<>();
                eventCountsPerManualDay2.putAll(eventCountsPerManualDay);
                System.out.println("Event Counts Per Day: " + eventCountsPerManualDay2);

                Iterator<Integer> iterator = eventCountsPerManualDay2.keySet().iterator();

                while (iterator.hasNext()) {
                    int it = iterator.next();
                    if (startDay > it || startDay + 6 < it) {
                        iterator.remove();
                    }
                }

                Map<Integer, Integer> modifications = new HashMap<>();

                for (int i = startDay; i < startDay + 7; i++) {
                    if (!eventCountsPerManualDay2.containsKey(i)) {
                        modifications.put(i, 0);
                    }
                }

                eventCountsPerManualDay2.putAll(modifications);

                System.out.println("Event Counts Per Day: " + eventCountsPerManualDay2);

                List<Map.Entry<Integer, Integer>> entryList = new ArrayList<>(eventCountsPerManualDay2.entrySet());
                Collections.sort(entryList, Comparator.comparingInt(Map.Entry::getKey));

                // Create a new LinkedHashMap with sorted entries
                LinkedHashMap<Integer, Integer> sortedEventCountsPerDay2 = new LinkedHashMap<>();
                for (Map.Entry<Integer, Integer> entry : entryList) {
                    sortedEventCountsPerDay2.put(entry.getKey(), entry.getValue());
                }
                System.out.println("Event Counts Per Day: " + sortedEventCountsPerDay2);

                // Pass the correct data (eventCountsPerDay) to the BarGraph constructor
                if (sortedEventCountsPerDay2.size() > 0) {
                    // Check if there is any key with a value greater than 0
                    boolean hasPositiveValue = sortedEventCountsPerDay2.values().stream().anyMatch(value -> value > 0);

                    if (hasPositiveValue) {
                        SwingUtilities.invokeLater(() -> {
                            BarGraph barGraph = new BarGraph(sortedEventCountsPerDay2);
                            barGraph.setVisible(true);
                        });
                    } else {
                        JOptionPane.showMessageDialog(null, "There are no events with a count greater than 0 for this week.");
                        updateCalendar();
                    }
                } else {
                    JOptionPane.showMessageDialog(null, "There are no events for this week.");
                    updateCalendar();
                }

            } else {
                JOptionPane.showMessageDialog(null, "Invalid day. Please enter a valid day for the current month.");
            }
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(null, "Invalid input. Please enter a valid number for the day.");
        }
    }

    private void updateBarGraph(int selectedDay) {

        // Increment the count for the selected day
        eventCountsPerManualDay.put(selectedDay, eventCountsPerManualDay.getOrDefault(selectedDay, 0) + 1);

        // Print the updated counts
        for (Map.Entry<Integer, Integer> entry : eventCountsPerManualDay.entrySet()) {
            Integer day = entry.getKey();
            Integer countCloudz = entry.getValue();

            // Print key-value pairs
            System.out.println("Day: " + day + ", Count: " + countCloudz);
        }
    }
    
    private void updateImportantEventsList() {
        if (countImp > 0) {
            ShowImportant importantEventsText = new ShowImportant(countImp);
             for (Map.Entry<String, Integer> entry : importantEventsMap.entrySet()) {
                String event = entry.getKey();
                Integer count = entry.getValue();
                importantEventsText.add(new JLabel(event));
            }

            importantEventsText.setVisible(true);
        }
        else {
            JOptionPane.showMessageDialog(null, "There are no important events.");
            updateCalendar();
        }
    }

    // Show Events :-)
    private void showEvents(int dayClicked) {
        if (countEvents > 0) {
            ShowEvents eventsPanel = new ShowEvents(countEvents);

            for (Map.Entry<String, Integer> entry : currentMap.entrySet()) {
                Integer days = entry.getValue();
                String event = entry.getKey();

                if (days == dayClicked) {
                    for (Map.Entry<Integer, Integer> entry1 : eventCountsPerDay.entrySet()) {
                        Integer days1 = entry1.getKey();

                        if (days == days1) {
                            eventsPanel.add(new JLabel(event));
                        }
                    }
                }
            }
            eventsPanel.setVisible(true);
        }
        else {
            JOptionPane.showMessageDialog(null, "There are no events for this day.");
            updateCalendar();
        }
    }

    private void updateInput() {
        JTextField title = new JTextField();
        JTextField day = new JTextField();
        JTextField month = new JTextField();
        JToggleButton allDay = new JToggleButton("False");
        JToggleButton important = new JToggleButton("Not Important");

        allDay.addActionListener(
                new ActionListener() {
                    @Override
                    public void actionPerformed(ActionEvent e) {
                        if (allDay.isSelected()) {
                            allDay.setText("True");
                        } else {
                            allDay.setText("False");
                        }
                    }
                });
                
        important.addActionListener(
                new ActionListener() {
                    int countTemp = countImp;
                    @Override
                    public void actionPerformed(ActionEvent e) {
                        
                        if(important.isSelected()) {
                            important.setText("Important");
                            countImp++;
                        } else {
                            important.setText("Not Important");
                            countImp = countTemp;
                        }
                    }
                });


        JPanel inputPanel = new JPanel(new GridLayout(7, 2));
        inputPanel.add(new JLabel("Day: "));
        inputPanel.add(day);
        inputPanel.add(new JLabel("Month: "));
        inputPanel.add(month);
        inputPanel.add(new JLabel("Title: "));
        inputPanel.add(title);
        inputPanel.add(new JLabel("All-Day: "));
        inputPanel.add(allDay);
        inputPanel.add(new JLabel("Important: "));
        inputPanel.add(important);

        int result = JOptionPane.showConfirmDialog(null, inputPanel, "New Event", JOptionPane.OK_CANCEL_OPTION);

        // !Null input check
        if (result == JOptionPane.OK_OPTION) {
            try {
                JOptionPane.showMessageDialog(null, "Event added successfully!");
                barGraphInput = title.getText();
                specifiedDay = Integer.parseInt(day.getText());
                currentMap.put(barGraphInput, specifiedDay);
                eventCountsPerDay.put(specifiedDay, countEvents++);
                specifiedMonth = Integer.parseInt(month.getText());
                updateBarGraph(specifiedDay);
                importantEventsMap.put(barGraphInput, countImp);
            }

            catch (NumberFormatException ex) {
                JOptionPane.showMessageDialog(null, "Invalid input. Please enter a valid number for the day.");
            }
        }
    }

    

    private void updateCalendar() {
        calendarPanel.removeAll();

        // Days of the week
        for (String day : daysOfWeek) {
            JLabel label = new JLabel(day, SwingConstants.CENTER);
            calendarPanel.add(label);
        }

        // Blank spaces for the first day of the month
        int firstDayOfMonth = currentMonth.get(Calendar.DAY_OF_WEEK) - 1;
        for (int i = 0; i < firstDayOfMonth; i++) {
            calendarPanel.add(new JLabel());
        }

        // Days of the month
        int maxDay = currentMonth.getActualMaximum(Calendar.DAY_OF_MONTH);
        for (int i = 1; i <= maxDay; i++) {
            JButton dayButton = new JButton(Integer.toString(i));
            dayButton.addActionListener(new DayButtonListener(i));
            calendarPanel.add(dayButton);
        }

        revalidate();
        repaint();
    }

    private class DayButtonListener implements ActionListener {
        private int day;

        public DayButtonListener(int day) {
            this.day = day;
        }

        @Override
        public void actionPerformed(ActionEvent e) {
            System.out.println(day);
            showEvents(day);
        }
    }

    public static void main(String[] args) {
        SwingUtilities.invokeLater(
                new Runnable() {
                    @Override
                    public void run() {
                        new CalendarApp();
                    }
                });
    }
}
